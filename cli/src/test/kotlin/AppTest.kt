/*
 * This source file was generated by the Gradle 'init' task
 */
package main

import kotlin.test.Test
import kotlin.test.assertEquals

import main.typehandler.*

class AppTest {
    @Test
    fun correctHexStringRepresentation() {
        val number = 127.864F
        assertEquals("42FFBA5E", floatToHexString(number))
    }
    @Test
    fun correctSliceToHex() {
        val slice1 = "0100"
        assertEquals('4', sliceToHex(slice1))
        val slice2 = "1110"
        assertEquals('E', sliceToHex(slice2))
    }
    @Test
    fun correctIntToBitString() {
        assertEquals("00000000000000000000000000000000", intToBitString(0))
        assertEquals("01111111111111111111111111111111", intToBitString(Int.MAX_VALUE))
        assertEquals("10000000000000000000000000000000", intToBitString(Int.MIN_VALUE))
    }
    @Test
    fun correctBitStringToFloat() {
        val bitStringPositive = "01000010111111111011101001011110"
        val bitStringNegative = "10111110100000000000000000000000"
        assertEquals(127.864F, bitStringToFloat(bitStringPositive))
        assertEquals(-0.25F, bitStringToFloat(bitStringNegative))
    }
    fun testShiftRegisters(){
        val registers = arrayOf(127.864F, 332.584F, 72.33F)
        val shiftNegative = -1
        val shiftPositive = 1
        assertEquals(6332744F, shiftRegisters(registers, shiftPositive))
        assertEquals(-0.00084787083F, shiftRegisters(registers, shiftNegative))
    }
}
