/*
 * This source file was generated by the Gradle 'init' task
 */
package main

import main.typehandler.*

fun flipWords(value: Float): Float {
    var bitString = floatToBitString(value)
    bitString = String.format("%s%s", bitString.slice(16..31), bitString.slice(0..15))
    return bitStringToFloat(bitString)
}

fun shiftRegisters(registers: Array<Float>, shift: Int): Float {
    if (shift !in -1..1) {
        throw IllegalArgumentException("Register shift must be within -1 to 1")
    }
    val bitStrings = registers.map({ floatToBitString(it) })
    val startIndexSlice = Float.SIZE_BITS + (shift * 2 * Byte.SIZE_BITS)
    val endIndexSlice = startIndexSlice + Float.SIZE_BITS
    val shiftedBitString = bitStrings.joinToString("").slice(startIndexSlice..endIndexSlice)
    return bitStringToFloat(shiftedBitString)
}

fun parseArgs(args: Array<String>): Map<String, String> {
    return args.toList().chunked(2).associate { it[0].replace("--", "") to it[1] }
}

fun printResults(registers: Array<Float>, shift: Int?, flip: Boolean?, result: Float) {
    println("Registers: ${registers.toList()}")
    println("Shift: $shift")
    println("flip: $flip")
    println("Result: $result")
}

fun main(args: Array<String>) {
    val argsMap = parseArgs(args)
    val shift = argsMap["shift"]?.toInt()
    val flip = argsMap["flip"]?.toBoolean()
    var registersArray: Array<Float> =
            try {
                argsMap["registers"]!!
                        .replace("[", "")
                        .replace("]", "")
                        .split(",")
                        .map(String::toFloat)
                        .toTypedArray()
            } catch (e: NullPointerException) {
                error("Mendatory argument \"registers\" not given.")
            }
    when {
        (shift != null && flip != null) -> {
            val result = if (flip) flipWords(shiftRegisters(registersArray, shift)) else shiftRegisters(registersArray, shift)
            printResults(registersArray, shift, flip, result)
        }
        (shift != null) -> {
            val result = shiftRegisters(registersArray, shift)
            printResults(registersArray, shift, flip, result)
        }
        (flip != null) -> {
            val result = flipWords(registersArray[1])
            printResults(registersArray, shift, flip, result)
        }
        else -> {
            println("Registers: $registersArray")
            println("Shift: $shift")
            println("flip: $flip")
            println("Result: ${registersArray[1]}")
        }
    }
}
