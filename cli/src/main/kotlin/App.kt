/*
 * This source file was generated by the Gradle 'init' task
 */
package main

import kotlin.math.absoluteValue
import kotlin.math.pow
import main.typehandler.*

fun flipWords(value: Float): Float {
    var bitString = floatToBitString(value)
    bitString = String.format("%s%s", bitString.slice(16..31), bitString.slice(0..15))
    return bitStringToFloat(bitString)
}
fun shiftRegisters(registers: Array<Float>, shift: Int): Float {
    val bitStrings = registers.map({floatToBitString(it)})
    val startIndexSlice = Float.SIZE_BITS + (shift * 2 * Byte.SIZE_BITS)
    val endIndexSlice = startIndexSlice + Float.SIZE_BITS
    val shiftedBitString = bitStrings.joinToString("").slice(startIndexSlice..endIndexSlice)  
    return bitStringToFloat(shiftedBitString)
}

fun main() {
    val number = 1220.27F
    println(floatToHexString(number))
    println(floatToHexString(flipWords(number)))
}
